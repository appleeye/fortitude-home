** Emacs源码阅读笔记

<literal>&nbsp;&nbsp;&nbsp;&nbsp;</literal>以Emacs bzr版本库的版本106082为基线，使用sloccount统计其代码规模，Emacs的源码中各类型代码所占比例如下：

  - lisp:       1040391 (79.03%)
  - ansic:       253569 (19.26%)
  - objc:         10401 (0.79%)
  - sh:            8690 (0.66%)
  - perl:          1340 (0.10%)
  - cs:             770 (0.06%)
  - cpp:            528 (0.04%)
  - awk:            466 (0.04%)
  - python:         331 (0.03%)
  - java:            27 (0.00%)
  - sed:              4 (0.00%)

<literal>&nbsp;&nbsp;&nbsp;&nbsp;</literal>因此可见，lisp代码在Emacs源码中占了很大的比例，除外如果阅读过Emacs Lisp Referrence Manual这篇文档的话，
应当注意过Introduction一节开篇即谈到：Emacs的大部分功能是由一种叫做Emacs Lisp的编程语言写成，现在单从代码
量看来，此话不假，至于如果有机会进一步阅读Emacs的源码时，就更加体会到这句话的意义，甚至创建Emacs的Frame的代
码，都是由Emacs Lisp写成（当然，还需要由C写成的一些builtin函数支撑）。

------

*** C代码
**** *编译与调试*
****  *main函数*
**** *builtin函数*
 - *DEFUN宏*

  DEFUN用于在emacs的C源文件中定义一个builtin函数，定义之后，可以在syms_of_xxx(xxx是文件名)中通过defsubr安装
这个builtin函数，当然，在大多数情况下，我们实际上不需要增加builtin函数，除非Elisp不易实现期望的功能。

  以下是DEFUN的定义以及使用DEFUN定义的一个核心函数：

<src lang="c">
/* This version of DEFUN declares a function prototype with the right
   arguments, so we can catch errors with maxargs at compile-time.  */
#define DEFUN(lname, fnname, sname, minargs, maxargs, intspec, doc) \
  Lisp_Object fnname DEFUN_ARGS_ ## maxargs ;				\
  static DECL_ALIGN (struct Lisp_Subr, sname) =				\
    { PVEC_SUBR,							\
      { .a ## maxargs = fnname },				\
      minargs, maxargs, lname, intspec, 0};				\
  Lisp_Object fnname
  </src>
<br>
<src lang="python">
DEFUN ("recursive-edit", Frecursive_edit, Srecursive_edit, 0, 0, "",
       doc: /* Invoke the editor command loop recursively.
To get out of the recursive edit, a command can do `(throw 'exit nil)';
that tells this function to return.
Alternatively, `(throw 'exit t)' makes this function signal an error.
This function is called by the editor initialization to begin editing.  */)
  (void)
{
  int count = SPECPDL_INDEX ();
  /* 其他代码忽略... */
}
  </src>
**** eval处理
**** 输入处理
**** 字节码处理
**** X/Gtk处理
**** 中文化处理

------

*** Emacs Lisp代码
**** 启动过程
loadup.el
startup.el(top_level form定义)
**** Fontify处理
**** 各类Hook
